@page "/equipos"
@using Microsoft.AspNetCore.Authorization
@using OUT_OS_APP.EQUIPGO.DTO.DTOs.Equipo
@inject Interface.Services.Equipos.IEquipoService EquipoService
@attribute [Authorize(Roles = "Admin")]

<link href="css/Dashboard/dashboard.css" rel="stylesheet" />
<div class="equipos-container">
    <h3>Listado de Equipos</h3>

    <!-- Contadores superiores -->
    <div class="target-counters" style="display: flex; gap: 20px; margin-bottom: 20px;">
        <div style="flex: 1; background-color: #000; color: #fff; border-radius: 12px; padding: 20px; text-align: center;  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.5)">
            <h4 style="margin: 0; font-size: 24px;">150</h4>
            <p>Equipos Registrados</p>
        </div>
        <div style="flex: 1; background-color: #555; color: #fff; border-radius: 12px; padding: 20px; text-align: center;  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.5)">
            <h4 style="margin: 0; font-size: 24px;">90</h4>
            <p>Equipos Personales</p>
        </div>
        <div style="flex: 1; background-color: #E9002B; color: #fff; border-radius: 12px; padding: 20px; text-align: center;  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.5)">
            <h4 style="margin: 0; font-size: 24px;">20</h4>
            <p>Equipos Corporativos</p>
        </div>
    </div>

    <!-- Contenedor de filtros -->
    <div class="mb-3 p-3 bg-white rounded shadow-sm" style="border: 1px solid #E9002B;">
        <div class="row g-3">
            <div class="col-md-3">
                <label for="filtroMarca" class="form-label">Marca</label>
                <input type="text" id="filtroMarca" class="form-control" @bind="filtroMarca" placeholder="Filtrar por marca..." />
            </div>
            <div class="col-md-3">
                <label for="filtroModelo" class="form-label">Modelo</label>
                <input type="text" id="filtroModelo" class="form-control" @bind="filtroModelo" placeholder="Filtrar por modelo..." />
            </div>
            <div class="col-md-3">
                <label for="filtroSerial" class="form-label">Serial</label>
                <input type="text" id="filtroSerial" class="form-control" @bind="filtroSerial" placeholder="Filtrar por serial..." />
            </div>
            <div class="col-md-3">
                <label for="filtroEstado" class="form-label">Estado</label>
                <input type="text" id="filtroEstado" class="form-control" @bind="filtroEstado" placeholder="Filtrar por estado..." />
            </div>
        </div>
        <div class="mt-3">
            <button class="btn btn-danger" @onclick="Filtrar">Aplicar Filtros</button>
            <button class="btn btn-secondary ms-2" @onclick="LimpiarFiltros">Limpiar</button>
        </div>
    </div>

    @if (equiposFiltrados == null)
    {
        <p>Cargando equipos...</p>
    }
    else if (!equiposFiltrados.Any())
    {
        <p>No hay equipos que coincidan con los filtros.</p>
    }
    else
    {
        <div class="table-wrapper" style="border: 1px solid #E9002B; border-radius: 10px; box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.5);">
            <table>
                <thead>
                    <tr>
                        <th>Marca</th>
                        <th>Modelo</th>
                        <th>Serial</th>
                        <th>Asset</th>
                        <th>Asignado a</th>
                        <th>Estado</th>
                        <th>Personal</th>
                        <th>Sede</th>
                        <th>Tipo Dispositivo</th>
                        <th>Sistema Operativo</th>
                        <th>MAC Equipo</th>
                        <th>Versión Software</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var equipo in equiposFiltrados)
                    {
                        <tr>
                            <td>@equipo.Marca</td>
                            <td>@equipo.Modelo</td>
                            <td>@equipo.Serial</td>
                            <td>@equipo.CodigoBarras</td>
                            <td>@equipo.UsuarioNombreCompleto</td>
                            <td>@equipo.EstadoNombre</td>
                            <td>@equipo.EquipoPersonalNombre</td>
                            <td>@equipo.SedeNombre</td>
                            <td>@equipo.TipoDispositivoNombre</td>
                            <td>@equipo.SistemaOperativo</td>
                            <td>@equipo.MacEquipo</td>
                            <td>@equipo.VersionSoftware</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<OUT_OS_APP.EQUIPGO.DTO.DTOs.Equipo.EquipoDto> equipos;
    private List<OUT_OS_APP.EQUIPGO.DTO.DTOs.Equipo.EquipoDto> equiposFiltrados = new List<OUT_OS_APP.EQUIPGO.DTO.DTOs.Equipo.EquipoDto>();

    // Filtros
    private string filtroMarca = "";
    private string filtroModelo = "";
    private string filtroSerial = "";
    private string filtroEstado = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            equipos = await EquipoService.ObtenerTodosLosEquiposAsync();
            equiposFiltrados = equipos.ToList();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"❌ Error al cargar equipos: {ex.Message}");
            equipos = new List<OUT_OS_APP.EQUIPGO.DTO.DTOs.Equipo.EquipoDto>();
            equiposFiltrados = new List<OUT_OS_APP.EQUIPGO.DTO.DTOs.Equipo.EquipoDto>();
        }
    }

    private void Filtrar()
    {
        if (equipos != null)
        {
            equiposFiltrados = equipos
                .Where(e =>
                    (string.IsNullOrWhiteSpace(filtroMarca) || (e.Marca?.Contains(filtroMarca, StringComparison.OrdinalIgnoreCase) ?? false)) &&
                    (string.IsNullOrWhiteSpace(filtroModelo) || (e.Modelo?.Contains(filtroModelo, StringComparison.OrdinalIgnoreCase) ?? false)) &&
                    (string.IsNullOrWhiteSpace(filtroSerial) || (e.Serial?.Contains(filtroSerial, StringComparison.OrdinalIgnoreCase) ?? false)) &&
                    (string.IsNullOrWhiteSpace(filtroEstado) || (e.EstadoNombre?.Contains(filtroEstado, StringComparison.OrdinalIgnoreCase) ?? false))
                )
                .ToList();
        }
    }

    private void LimpiarFiltros()
    {
        filtroMarca = "";
        filtroModelo = "";
        filtroSerial = "";
        filtroEstado = "";
        equiposFiltrados = equipos?.ToList() ?? new List<OUT_OS_APP.EQUIPGO.DTO.DTOs.Equipo.EquipoDto>();
    }
}
