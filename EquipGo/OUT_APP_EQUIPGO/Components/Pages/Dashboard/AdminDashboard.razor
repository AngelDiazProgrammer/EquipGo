@page "/AdminDashboard"
@using System.Collections.Generic
@inject IJSRuntime JS

<PageTitle>AdminDashboard</PageTitle>

<div class="frame-container">
    <!-- Encabezado -->
    <div class="dashboard-parent">
        <b class="dashboard-equipgo">Dashboard</b>
        <div class="logo-os">
            <img class="dashboard-vector-icon" alt="Logo" src="img/logoOutsourcing.png" />
        </div>
    </div>

    <!-- Contadores superiores dinámicos CON IDs -->
    <div class="info">
        <div class="card-registros">
            <svg class="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm.5-13H11v6l5.25 3.15.75-1.23-4.5-2.67z" /></svg>
            <div class="datos">
                <b class="b" id="totalHoy">@TotalHoy</b>
                <b class="transacciones-de-hoy">Transacciones de Hoy</b>
            </div>
        </div>
        <div class="dashboard-card-registros">
            <svg class="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm.5-13H11v6l5.25 3.15.75-1.23-4.5-2.67z" /></svg>
            <div class="dashboard-datos">
                <b class="b" id="totalNormales">@TotalNormales</b>
                <b class="transacciones-de-hoy">Transacciones Internas</b>
            </div>
        </div>
        <div class="card-alerta">
            <svg class="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm.5-13H11v6l5.25 3.15.75-1.23-4.5-2.67z" /></svg>
            <div class="dashboard-datos">
                <b class="b" id="totalVisitantes">@TotalVisitantes</b>
                <b class="transacciones-de-hoy">Transacciones de Visitantes</b>
            </div>
        </div>
    </div>

    <div class="contenido">
        <div class="cambiar-seleccin">
            <div class="btn-cambio">
                <div class="corporativo active-tab" id="tabCorporativo"><b class="dashboard-equipgo">Corporativo</b></div>
                <div class="visitante" id="tabVisitante"><b class="dashboard-equipgo">Visitante</b></div>
            </div>
        </div>
        <div class="corporativo2" id="corporativoSection" style="display: flex;">
            <div class="table-wrapper">

                <!-- TABLA CON ID -->
                <table class="table-equipgo" style="width: 100%;" id="tablaDashboard">
                    <thead>
                        <tr>
                            <th>Usuario</th>
                            <th>Código de Barras</th>
                            <th>Tipo Transacción</th>
                            <th>Guarda Aprobador</th>
                            <th>Sede OS</th>
                        </tr>
                    </thead>
                    <tbody id="tbodyDashboard">
                        @foreach (var item in PaginatedCorporativoItems)
                        {
                            <tr>
                                @if (item.Usuario != null)
                                {
                                    <td>@item.Usuario</td>
                                    <td>@item.CodigoBarras</td>
                                    <td>@item.TipoTransaccion</td>
                                    <td>@item.GuardaAprobador</td>
                                    <td>@item.SedeOS</td>
                                }
                                else
                                {
                                    <td>&nbsp;</td>
                                    <td>&nbsp;</td>
                                    <td>&nbsp;</td>
                                    <td>&nbsp;</td>
                                    <td>&nbsp;</td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- SECCIÓN VISITANTES -->
        <div class="visitante2" id="visitanteSection" style="display: none;">
            <div class="table-wrapper">
                <!-- TABLA CON ID -->
                <table class="table-equipgo" style="width: 100%;" id="tablaVisitantes">
                    <thead>
                        <tr>
                            <th>Nombre Visitante</th>
                            <th>Marca</th>
                            <th>Tipo Transacción</th>
                            <th>Guarda Aprobador</th>
                            <th>Sede</th>
                        </tr>
                    </thead>
                    <tbody id="tbodyVisitantes">
                        @foreach (var item in PaginatedVisitanteItems)
                        {
                            <tr>
                                @if (item.NombreVisitante != null)
                                {
                                    <td>@item.NombreVisitante</td>
                                    <td>@item.Marca</td>
                                    <td>@item.TipoTransaccion</td>
                                    <td>@item.AprobadoPor</td>
                                    <td>@item.Sede</td>
                                }
                                else
                                {
                                    <td>&nbsp;</td>
                                    <td>&nbsp;</td>
                                    <td>&nbsp;</td>
                                    <td>&nbsp;</td>
                                    <td>&nbsp;</td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<style>
    /* Mensaje de carga cuando tbody está vacío - CORPORATIVO */
    #tbodyDashboard:empty::after {
        content: 'Esperando a que se realicen escaneos';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        color: #666;
        font-size: 16px;
        font-weight: 500;
        white-space: nowrap;
        animation: dots 1.5s steps(4, end) infinite;
        z-index: 10;
    }

    /* Mensaje de carga cuando tbody está vacío - VISITANTES */
    #tbodyVisitantes:empty::after {
        content: 'Esperando a que se realicen escaneos';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        color: #666;
        font-size: 16px;
        font-weight: 500;
        white-space: nowrap;
        animation: dots 1.5s steps(4, end) infinite;
        z-index: 10;
    }

    @@keyframes dots {
        0%, 20% {
            content: 'Esperando a que se realicen escaneos';
        }

        40% {
            content: 'Esperando a que se realicen escaneos.';
        }

        60% {
            content: 'Esperando a que se realicen escaneos..';
        }

        80%, 100% {
            content: 'Esperando a que se realicen escaneos...';
        }
    }
</style>

<script>
    //IniciarTabla
    function initDashboardUI(dotNetHelper) {
        console.log("UI del Dashboard inicializada.");

        const corporativoBtn = document.getElementById('tabCorporativo');
        const visitanteBtn = document.getElementById('tabVisitante');
        const corporativoSection = document.getElementById('corporativoSection');
        const visitanteSection = document.getElementById('visitanteSection');

        if (corporativoBtn && visitanteBtn && corporativoSection && visitanteSection) {
            corporativoBtn.addEventListener('click', () => showTab('corporativo'));
            visitanteBtn.addEventListener('click', () => showTab('visitante'));
        }

        function showTab(tab) {
            if (tab === 'corporativo') {
                corporativoSection.style.display = 'flex';
                visitanteSection.style.display = 'none';
                corporativoBtn.classList.add('active-tab');
                visitanteBtn.classList.remove('active-tab');
            } else {
                corporativoSection.style.display = 'none';
                visitanteSection.style.display = 'flex';
                visitanteBtn.classList.add('active-tab');
                corporativoBtn.classList.remove('active-tab');
            }
            // Al cambiar de pestaña, aplicar filtros de la nueva pestaña activa
            triggerFilterUpdate();
        }

        let debounceTimer;

        function triggerFilterUpdate() {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => {
                const activeSection = document.querySelector('.corporativo2:not([style*="display: none"]), .visitante2:not([style*="display: none"])');
                if (!activeSection) return;

                const filterType = activeSection.id.includes('corporativo') ? 'corporativo' : 'visitante';
                const filters = {};
                activeSection.querySelectorAll('.filter-input').forEach(el => {
                    if (el.name) {
                        filters[el.name] = el.value;
                    }
                });
                console.log(`Llamando a C# para aplicar filtros para ${filterType}:`, filters);

                // Llamamos al método [JSInvokable] de C#
                dotNetHelper.invokeMethodAsync('ApplyFiltersFromJS', filterType, filters);
            }, 300);
        }

        // Añadir listeners a todos los campos de filtro
        document.addEventListener('input', (e) => {
            if (e.target.classList.contains('filter-input')) {
                triggerFilterUpdate();
            }
        });

        document.addEventListener('change', (e) => {
            if (e.target.classList.contains('filter-input')) {
                triggerFilterUpdate();
            }
        });

        // Listener para el botón "Limpiar Filtros"
        document.addEventListener('click', (e) => {
            if (e.target.closest('.botn3')) {
                const filterContainer = e.target.closest('.dashboard-filtros');
                filterContainer.querySelectorAll('.filter-input').forEach(input => {
                    input.value = '';
                });
                // Dispara la actualización después de limpiar
                triggerFilterUpdate();
                console.log("Filtros limpiados.");
            }
        });
    }
</script>

@code {
    // --- MODELOS DE DATOS ---
    public class TransaccionCorporativo
    {
        public string Usuario { get; set; }
        public string CodigoBarras { get; set; }
        public string TipoTransaccion { get; set; }
        public string GuardaAprobador { get; set; }
        public string SedeOS { get; set; }
    }

    public class TransaccionVisitante
    {
        public string NombreVisitante { get; set; }
        public string Marca { get; set; }
        public string TipoTransaccion { get; set; }
        public string AprobadoPor { get; set; }
        public string Sede { get; set; }
    }

    // --- ESTADO Y DATOS ---
    private const int PageSize = 6; // Tamaño de página fijo a 6

    // Datos completos
    private List<TransaccionCorporativo> AllCorporativoItems { get; set; } = new();
    private List<TransaccionVisitante> AllVisitanteItems { get; set; } = new();

    // Datos filtrados
    private List<TransaccionCorporativo> FilteredCorporativoItems { get; set; } = new();
    private List<TransaccionVisitante> FilteredVisitanteItems { get; set; } = new();

    // Estado de paginación
    private int CurrentCorporativoPage { get; set; } = 1;
    private int CurrentVisitantePage { get; set; } = 1;

    // --- PROPIEDADES CALCULADAS PARA LA PAGINACIÓN MEJORADAS ---
    private List<TransaccionCorporativo> PaginatedCorporativoItems
    {
        get
        {
            var items = FilteredCorporativoItems.Skip((CurrentCorporativoPage - 1) * PageSize).Take(PageSize).ToList();

            // Asegurar que siempre tengamos 6 filas visualmente
            while (items.Count < PageSize && items.Count > 0)
            {
                items.Add(new TransaccionCorporativo()); // Fila vacía
            }

            return items;
        }
    }

    private int TotalCorporativoPages =>
        Math.Max(1, (int)Math.Ceiling((double)FilteredCorporativoItems.Count / PageSize));

    private List<TransaccionVisitante> PaginatedVisitanteItems
    {
        get
        {
            var items = FilteredVisitanteItems.Skip((CurrentVisitantePage - 1) * PageSize).Take(PageSize).ToList();

            // Asegurar que siempre tengamos 6 filas visualmente
            while (items.Count < PageSize && items.Count > 0)
            {
                items.Add(new TransaccionVisitante()); // Fila vacía
            }

            return items;
        }
    }

    private int TotalVisitantePages =>
        Math.Max(1, (int)Math.Ceiling((double)FilteredVisitanteItems.Count / PageSize));

    // --- CONTADORES ---
    private int TotalHoy => AllCorporativoItems.Count + AllVisitanteItems.Count;
    private int TotalNormales => AllCorporativoItems.Count;
    private int TotalVisitantes => AllVisitanteItems.Count;

    // --- MÉTODOS DE CICLO DE VIDA ---
    protected override async Task OnInitializedAsync()
    {

        FilteredCorporativoItems = AllCorporativoItems;
        FilteredVisitanteItems = AllVisitanteItems;

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initDashboardUI", DotNetObjectReference.Create(this));
            StateHasChanged(); // Forzar actualización después de cargar datos
        }
    }

    // --- MÉTODOS DE PAGINACIÓN MEJORADOS ---
    private void GoToPreviousCorporativoPage()
    {
        if (CurrentCorporativoPage > 1)
        {
            CurrentCorporativoPage--;
            StateHasChanged();
        }
    }

    private void GoToNextCorporativoPage()
    {
        if (CurrentCorporativoPage < TotalCorporativoPages)
        {
            CurrentCorporativoPage++;
            StateHasChanged();
        }
    }

    private void GoToPreviousVisitantePage()
    {
        if (CurrentVisitantePage > 1)
        {
            CurrentVisitantePage--;
            StateHasChanged();
        }
    }

    private void GoToNextVisitantePage()
    {
        if (CurrentVisitantePage < TotalVisitantePages)
        {
            CurrentVisitantePage++;
            StateHasChanged();
        }
    }

    // --- MÉTODO QUE SERÁ LLAMADO DESDE JAVASCRIPT PARA APLICAR FILTROS ---
    [JSInvokable]
    public void ApplyFiltersFromJS(string filterType, Dictionary<string, string> filters)
    {
        if (filterType == "corporativo")
        {
            FilteredCorporativoItems = AllCorporativoItems.Where(item =>
                (string.IsNullOrEmpty(filters["usuario"]) || (item.Usuario?.Contains(filters["usuario"], StringComparison.OrdinalIgnoreCase) ?? false)) &&
                (string.IsNullOrEmpty(filters["codigoBarras"]) || (item.CodigoBarras?.Contains(filters["codigoBarras"], StringComparison.OrdinalIgnoreCase) ?? false)) &&
                (string.IsNullOrEmpty(filters["tipoTransaccion"]) || (item.TipoTransaccion?.Equals(filters["tipoTransaccion"], StringComparison.OrdinalIgnoreCase) ?? false)) &&
                (string.IsNullOrEmpty(filters["guardaAprobador"]) || (item.GuardaAprobador?.Contains(filters["guardaAprobador"], StringComparison.OrdinalIgnoreCase) ?? false))
            ).ToList();

            // Asegurar que la página actual sea válida después de filtrar
            CurrentCorporativoPage = Math.Min(CurrentCorporativoPage, TotalCorporativoPages);
            if (CurrentCorporativoPage < 1) CurrentCorporativoPage = 1;
        }
        else if (filterType == "visitante")
        {
            FilteredVisitanteItems = AllVisitanteItems.Where(item =>
                (string.IsNullOrEmpty(filters["nombreVisitante"]) || (item.NombreVisitante?.Contains(filters["nombreVisitante"], StringComparison.OrdinalIgnoreCase) ?? false)) &&
                (string.IsNullOrEmpty(filters["marca"]) || (item.Marca?.Contains(filters["marca"], StringComparison.OrdinalIgnoreCase) ?? false)) &&
                (string.IsNullOrEmpty(filters["tipoTransaccion"]) || (item.TipoTransaccion?.Equals(filters["tipoTransaccion"], StringComparison.OrdinalIgnoreCase) ?? false)) &&
                (string.IsNullOrEmpty(filters["aprobadoPor"]) || (item.AprobadoPor?.Contains(filters["aprobadoPor"], StringComparison.OrdinalIgnoreCase) ?? false))
            ).ToList();

            // Asegurar que la página actual sea válida después de filtrar
            CurrentVisitantePage = Math.Min(CurrentVisitantePage, TotalVisitantePages);
            if (CurrentVisitantePage < 1) CurrentVisitantePage = 1;
        }
        StateHasChanged();
    }
}